buildscript {

    ext.PLUGIN_VERSION = "2.0.8"
    ext.ATAK_VERSION = "4.10.0"

    // Attempt to read ATAK_VERSION from the environment
    def ENV_ATAK_VERSION = System.getenv('ATAK_VERSION')
    if (ENV_ATAK_VERSION) {
        ext.ATAK_VERSION = ENV_ATAK_VERSION
    }

    def takdevVersion = '2.+'

    def getValueFromPropertiesFile = { propFile, key ->
        if(!propFile.isFile() || !propFile.canRead())
            return null
        def prop = new Properties()
        def reader = propFile.newReader()
        try {
            prop.load(reader)
        } finally {
            reader.close()
        }
        return prop.get(key)
    }

    def getProperty = { name, defValue ->
        def prop = project.properties[name] ?:
                getValueFromPropertiesFile(project.rootProject.file('local.properties'), name)
        return (null == prop) ? defValue : prop
    }

    def urlKey = 'takrepo.url'

    ext.isDevKitEnabled = { ->
        return getProperty(urlKey, null) != null
    }

    ext.takrepoUrl = getProperty(urlKey, 'http://localhost/')
    ext.takrepoUser = getProperty('takrepo.user', 'invalid')
    ext.takrepoPassword = getProperty('takrepo.password', 'invalid')
    ext.takdevPlugin = getProperty('takdev.plugin', "${rootDir}/../atak-civ-sdk-4.10.1/atak-gradle-takdev.jar")

    repositories {
        google()
        mavenCentral()
        mavenLocal()
        maven {
            url "https://jitpack.io"
        }
        maven {
            url = takrepoUrl
            credentials {
                username = takrepoUser
                password = takrepoPassword
            }
            allowInsecureProtocol = true
        }
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:7.4.2'
        if(isDevKitEnabled()) {
            classpath "com.atakmap.gradle:atak-gradle-takdev:${takdevVersion}"
        } else {
            classpath files(takdevPlugin)
        }
    }
}

allprojects {
    repositories {
        google()
        mavenCentral()
        mavenLocal()
        maven {
            url "https://jitpack.io"
        }
    }
}

apply plugin: 'com.android.application'
apply plugin: 'com.google.protobuf'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-parcelize'
apply plugin: 'kotlinx-serialization'
apply plugin: 'atak-takdev-plugin'

def supportedFlavors =
[
    [ name : 'civ', default: true ],
    [ name : 'mil' /** example: true **/],
    [ name : 'aus' ],
    [ name : 'nzl' ],
    [ name : 'prt' ],
    [ name : 'nor' ],
    [ name : 'swe' ],
    [ name : 'gbr' ],
    [ name : 'can' ],
    [ name : 'hun' ],
    [ name : 'bel' ],
    [ name : 'est' ],
    [ name : 'ltu' ],
    [ name : 'ukr' ],
    [ name : 'pol' ],
    [ name : 'nld' ],
    [ name : 'esp' ],
    [ name : 'aeronet' ],
    [ name : 'gov' ],
    [ name : 'natosof' ],
]

android {
    compileSdkVersion 33
    buildToolsVersion "30.0.3"

    bundle {
        storeArchive {
            enable = false
        }
    }

    packagingOptions {
        jniLibs {
            useLegacyPackaging = true
        }
    }

    lintOptions {
        checkReleaseBuilds true
        // Or, if you prefer, you can continue to check for errors in release builds,
        // but continue the build even when errors are found:
        abortOnError true
    }

    signingConfigs {
        debug {
            storeFile file("${rootDir}/pipeline-signing-key.keystore")
            storePassword "keyfilepass"
            keyAlias "pipeline-signing-key"
            keyPassword "keypass"
        }
        release {
            storeFile file("${rootDir}/pipeline-signing-key.keystore")
            storePassword "keyfilepass"
            keyAlias "pipeline-signing-key"
            keyPassword "keypass"
        }
    }

    buildTypes {
        debug {
            debuggable true
            matchingFallbacks = ['sdk']
        }
        release {
            minifyEnabled true
            proguardFile 'proguard-gradle.txt'
            signingConfig signingConfigs.release
            matchingFallbacks = ['odk']
        }
    }

    flavorDimensions "application"

    productFlavors {
        supportedFlavors.each { flav ->
            "${flav.name}" {
                getIsDefault().set(flav.name.equals("${flav.default}".toString()))
                dimension "application"

                // retain existing application identifiers for civ and mil
                if (!flav.name.equals("civ") && !flav.name.equals("mil")) {
                    applicationIdSuffix = ".${flav.name}"
                }
                // resolve CIV dependency if flavor specific dependency is not available
                matchingFallbacks = ['civ']

                // set the api version information
                def pluginApiFlavor = flav.name.equals('gov') ? 'CIV' : "${flav.name.toUpperCase()}"
                manifestPlaceholders = [atakApiVersion: "com.atakmap.app@" + ATAK_VERSION + ".${pluginApiFlavor}"]

                // additional variables associated with the flav can be set here once defined above
                // buildConfigField 'boolean', 'EXAMPLE', "${flav.example}"
            }
        }
        // additional variables associated with all flavors can be set here
        applicationVariants.all { variant ->
            variant.resValue "string", "versionName", variant.versionName
            buildConfigField 'String', 'ATAK_PACKAGE_NAME', '"com.atakmap.app.civ"'
        }
    }

    packagingOptions {
        exclude 'META-INF/INDEX.LIST'


        // Extract native libraries from the APK - required for plugin loading
        jniLibs.useLegacyPackaging true
    }

    sourceSets {
        main {
            setProperty("archivesBaseName", "ATAK-Plugin-" + rootProject.name + "-" + PLUGIN_VERSION + "-" + getVersionName() + "-" + ATAK_VERSION)
            defaultConfig.versionCode = getVersionCode()
            defaultConfig.versionName = PLUGIN_VERSION + " (" + getVersionName() + ") - [" + ATAK_VERSION + "]"

            proto {
                srcDir 'src/main/meshtastic-protobuf'
            }
        }

        gov.java.srcDirs 'src/gov/java'
        gov.assets.srcDir 'src/gov/assets'
        gov.res.srcDir 'src/gov/res'

        test {
            proto {
                srcDir 'src/main/meshtastic-protobuf'
            }
            java.srcDirs 'src/test/java'
        }

        debug.setRoot('build-types/debug')
        release.setRoot('build-types/release')
    }

    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 31

        def runTasks = gradle.startParameter.taskNames
        if(runTasks.toString().contains('bundle')) {
            ndk {
                abiFilters "armeabi-v7a", "arm64-v8a"
            }
        } else {
            ndk {
                abiFilters "armeabi-v7a", "arm64-v8a", "x86"
            }
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = "1.8"
    }

}

afterEvaluate {
    try {
        tasks.named("compile" + getCommandFlavor() + "ReleaseKotlin") {
            println "modifying " + getCommandFlavor().toLowerCase() + " kotlin compile options to include: -Xsam-conversions=class"
            kotlinOptions {
                freeCompilerArgs += "-Xsam-conversions=class"
            }
        }
    } catch (Exception ignored) { }
}

// modified code to find the current flavor in progress
def getCommandFlavor() {
    String  tskReqStr = getGradle().getStartParameter().getTaskRequests().toString()

    java.util.regex.Pattern pattern
    if( tskReqStr.contains( "assemble" ) )
        pattern = java.util.regex.Pattern.compile("assemble(\\w+)(Release|Debug)")
    else if( tskReqStr.contains( "install" ) )
        pattern = java.util.regex.Pattern.compile("install(\\w+)(Release|Debug)")
    else
        pattern = java.util.regex.Pattern.compile("generate(\\w+)(Release|Debug)")

    java.util.regex.Matcher matcher = pattern.matcher(tskReqStr)

    if( matcher.find() ) {
        return matcher.group(1)
    } else {
        return "Civ"
    }
}

dependencies {
    implementation "androidx.constraintlayout:constraintlayout:2.1.4"

    implementation 'com.google.protobuf:protobuf-kotlin-lite:3.21.12'

    implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime:1.0-M1-1.4.0-rc"

    implementation 'com.google.code.gson:gson:2.10.1'
    implementation 'me.dm7.barcodescanner:zxing:1.9.13'
    implementation 'eo.view:batterymeter:2.0.0'

    implementation 'com.paulmandal.atak:libcotshrink:1.0.3'

    testImplementation 'junit:junit:4.13.2'
}

protobuf {
    protoc {
        artifact = 'com.google.protobuf:protoc:3.21.9'
    }
    generateProtoTasks {
        all().each { task ->
            task.builtins {
                java {
                    option 'lite'
                }
                kotlin {
                    option 'lite'
                }
            }
        }
    }
}
